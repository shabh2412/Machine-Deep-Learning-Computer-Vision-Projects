# -*- coding: utf-8 -*-
"""Analyzing Conversion Rates of Marketing Campaigns - Data Exploration

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yT0nCtbppplc6wypSVtEpE-ftdZv89rS

# Analyzing the Conversion Rate of a Bank's Marketing Campaign
### EXPLORATORY ANALYSIS

Source - https://archive.ics.uci.edu/ml/datasets/bank+marketing

### bank client data:
1. age (numeric)
2. job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')
3. marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)
4. education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')
5. default: has credit in default? (categorical: 'no','yes','unknown')
6. housing: has housing loan? (categorical: 'no','yes','unknown')
7. loan: has personal loan? (categorical: 'no','yes','unknown')
#### related with the last contact of the current campaign:
8. contact: contact communication type (categorical: 'cellular','telephone')
9. month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')
10. day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')
11. duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.
#### other attributes:
12. campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)
13. pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)
14. previous: number of contacts performed before this campaign and for this client (numeric)
15. poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')
#### social and economic context attributes
16. emp.var.rate: employment variation rate - quarterly indicator (numeric)
17. cons.price.idx: consumer price index - monthly indicator (numeric)
18. cons.conf.idx: consumer confidence index - monthly indicator (numeric)
19. euribor3m: euribor 3 month rate - daily indicator (numeric) - Euro Interbank Offered Rate. The Euribor rates are based on the average interest rates at which a large panel of European banks borrow funds from one another
20. nr.employed: number of employees - quarterly indicator (numeric)

Output variable (desired target):
21. y - has the client subscribed a term deposit? (binary: 'yes','no')


\
"""

import pandas as pd

bank = pd.read_csv('/content/bank-additional-full.csv', sep=';')

bank.head()

print ("Rows     : " , bank.shape[0])
print ("Columns  : " , bank.shape[1])
print ("\nFeatures : \n" ,bank.columns.tolist())
print ("\nMissing values :  ", bank.isnull().sum().values.sum())
print ("\nUnique values :  \n", bank.nunique())

"""#### Making our 'yes' and 'no' column for y (where 'y' indicates whether a customer was converted)
#### into a binary numeric datatype where '0' is 'no' and '1' is 'yes'
"""

bank['converted'] = bank['y'].apply(lambda c:1  if c == 'yes' else 0)

# Let's delete our old y column since it's now been made redundant by the new column called 'converted'
#bank = bank.drop(['y'], axis = 1)

bank.head()

"""## Getting some base statistics to better understand how much customers converted"""

bank.describe()

bank.info()

### Ploting the co-relation matrix
import matplotlib.pyplot as plt

def plot_corr(df,size=10):
    '''Function plots a graphical correlation matrix for each pair of columns in the dataframe.

    Input:
        df: pandas DataFrame
        size: vertical and horizontal size of the plot'''

    corr = df.corr()
    fig, ax = plt.subplots(figsize=(size, size))
    ax.legend()
    cax = ax.matshow(corr)
    fig.colorbar(cax)
    plt.xticks(range(len(corr.columns)), corr.columns, rotation='vertical')
    plt.yticks(range(len(corr.columns)), corr.columns)
    
plot_corr(bank)

print('Total Converted: %i out of %i' % (bank.converted.sum(), len(bank)))

print('Our Conversion Rate: %0.2f%%' % (bank.converted.sum() / len(bank) * 100.0))

"""### Getting the sum of the number of conversions per campaign"""

pd.DataFrame(bank.groupby(by='campaign')['converted'].sum())

"""### Getting the total number of customers targeted per campaign"""

pd.DataFrame(bank.groupby(by='campaign')['converted'].count())

"""### Finding the conversion rate for each campaign"""

conv_by_camp = bank.groupby('campaign')['converted'].sum() / bank.groupby('campaign')['converted'].count() * 100.0
conv_by_camp.head(10)

"""### Alternative method using aggregate and a lamda function"""

converted_sums_camp = bank.groupby(['campaign', 'converted']).agg({'converted': 'count'})
conv_by_camp2 = converted_sums_camp.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
conv_by_camp2

"""### Conversion Rates by Age"""

converted_sums_age = bank.groupby(['age', 'converted']).agg({'converted': 'count'})
conv_by_age = converted_sums_age.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
conv_by_age

# Isolate it to percentages for more efficient viewing
conv_by_age = bank.groupby('age')['converted'].sum() / bank.groupby('age')['converted'].count() * 100.0

#conv_by_age = pd.DataFrame(conv_by_age)
conv_by_age = pd.DataFrame(conv_by_age).reset_index()
conv_by_age

conv_by_age.sort_values('converted', ascending=False)

conv_by_age = conv_by_age.set_index('age')
conv_by_age

import matplotlib.pyplot as plt

ax = conv_by_age.plot(grid=True, figsize=(10, 7), title='Conversion Rates by Age')

ax.set_xlabel('Age')
ax.set_ylabel('Conversion Rate (%)')

plt.show()

"""## Creating age groups for better interpretation of age"""

bank['age_group'] = bank['age'].apply(lambda x: '[17, 25)' if x < 25 else '[25, 35)' 
                                  if x < 35 else '[35, 45)'
                                  if x < 45 else '[45, 55)' 
                                  if x < 55 else '[55, 65)'
                                  if x < 65 else '65+')
bank.head()

"""### Grouping by age group now, let's sum the number of coversions (i.e. the 1s)"""

pd.DataFrame(bank.groupby('age_group')['converted'].sum())

"""### Grouping by age group now, let's count the number of coversions"""

pd.DataFrame(bank.groupby('age_group')['converted'].count())

"""### Let's combine the above to get the ratio or perscent converted"""

conv_by_age_group = bank.groupby('age_group')['converted'].sum() / bank.groupby('age_group')['converted'].count() * 100.0

#conv_by_age_group = pd.DataFrame(conv_by_age_group).reset_index()
conv_by_age_group.head()

"""### Now let us plot the age groups vs conversion rate"""

ax = conv_by_age_group.loc[['[17, 25)', '[25, 35)', '[35, 45)', '[45, 55)', '[55, 65)', '65+']].plot(
    kind='bar',
    color='coral',
    grid=True,
    figsize=(12, 8),
    title='Conversion Rates by Age Groups')

ax.set_xlabel('age')
ax.set_ylabel('conversion rate (%)')

plt.show()

"""### Let's do the same for education"""

conversions_by_education = pd.pivot_table(bank, values='y', index='education', columns='converted', aggfunc=len)
conversions_by_education

# Renaming those columns
conversions_by_education.columns = ['non_conversions', 'conversions']
conversions_by_education

"""### Ploting those on a piechart"""

conversions_by_education.plot(
    kind='pie',
    figsize=(15, 7),
    startangle=90,
    subplots=True,
    autopct=lambda x: '%0.2f%%' % x,
    legend=False
)

plt.show()

# Printing the column names so we can use them as labels in our next chart
list(conversions_by_education.reset_index()['education'])

# Let's flatten our multi-index dataframe so we can plot it - Option 2 to do above
#conversions_by_education = conversions_by_education.reset_index()

new_order = [1,0]
conversions_by_education = conversions_by_education[conversions_by_education.columns[new_order]]
conversions_by_education

"""### Let's plot a stacked bargraph"""

ax = conversions_by_education.loc[['basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course',
 'university.degree','unknown']].plot(
    kind='bar', 
    grid=True,
    stacked=True,
    figsize=(10,7))

ax.set_title('Conversions by Education Level')
ax.set_xlabel('Education Level')
ax.set_ylabel('conversion counts')

plt.show()

conversions_by_education['per_converted'] = conversions_by_education['conversions'] / conversions_by_education['non_conversions']
conversions_by_education

ax = conversions_by_education.loc[['basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course',
 'university.degree','unknown']].plot(
    y = 'per_converted',
    kind='bar', 
    grid=True,
    stacked=True,
    figsize=(12,7))

ax.set_title('Conversions by Education Level')
ax.set_xlabel('Education Level')
ax.set_ylabel('conversion counts')

plt.show()

"""### Let's explore Conversion Rate by Job"""

conv_rate_by_job = bank.groupby('job')['converted'].sum() / bank.groupby('job')['converted'].count() * 100.0
conv_rate_by_job

# Sorting it for a better aesthetic when plotted
conv_rate_by_job = conv_rate_by_job.sort_values()
conv_rate_by_job

"""### Generating a Horizontal Bar Graph"""

ax = conv_rate_by_job.plot(
    kind='barh',
    color='coral',
    grid=True,
    figsize=(10, 8),
    title='Conversion Rates by Job')

ax.set_xlabel('conversion rate (%)')
ax.set_ylabel('Job')

plt.show()

"""### Let's explore Conversion Rate By Marital Status"""

conv_rate_by_ms = bank.groupby('marital')['converted'].sum() / bank.groupby('marital')['converted'].count() * 100.0
conv_rate_by_ms = conv_rate_by_ms.sort_values()
conv_rate_by_ms

"""### Let's generate a simple bar plot"""

ax = conv_rate_by_ms.plot(
    kind='bar',
    color='coral',
    grid=True,
    figsize=(10, 6),
    title='Conversion Rates by Marital Status')

ax.set_xlabel('Marital Status')
ax.set_ylabel('conversion rate (%)')

plt.show()